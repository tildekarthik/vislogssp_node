<p>Upload images for {{company}} / {{plant}} / {{partnumber}}</p>
<p>Inspection Id for reference: {{inspectionId}}</p>

<div>
  <form 
    id="uploadForm" 
    hx-post="/v3/imagesupload/{{company}}/{{plant}}/{{partnumber}}" 
    hx-include="[name='inspectionId'], [name='partSerialNumber'], [name='photos-resized'], [name='views']"
    hx-trigger="submit"
    hx-target="#mainBody"
    >
    <input
      type="hidden"
      id="inspectionId"
      name="inspectionId"
      value="{{inspectionId}}"
    />
    {{#each sample_images}}
    <h6>{{@key}}</h6>
      <div class="grid">
        <div><img loading="lazy" src="{{this}}" alt="Placeholder" width="50%" /></div>
        <div>
          <input type="file" id="{{@key}}" name="photos" accept="image/*" capture="environment" required />
          <div id="displayImage-{{@key}}"></div>
        </div>
        <!-- Hidden inputes to hold resized photos -->
        <input type="hidden" id="resized-{{@key}}" name="photosresized" />
        <input type="hidden" name="views" value="{{@key}}" />
      </div>
      <p></p> 
    {{/each}}
    
    <p></p>
    <label for="partSerialNumber">Part Serial Number (Optional):</label>
    <input
      type="text"
      id="partSerialNumber"
      name="partSerialNumber"
    />
    <p></p>
    <button type="submit">Upload Inspection Images</button>
  </form>
</div>
<script>
  document.querySelectorAll('input[type="file"]').forEach(input => {
      input.addEventListener('change', async event => {
          const file = event.target.files[0];
          if (!file) return;

          const resizedBase64 = await resizeImage(file, 1920, 1920); 

          const hiddenInputId = `resized-${event.target.id}`;
          const hiddenInput = document.getElementById(hiddenInputId);
          hiddenInput.value = resizedBase64;
          
          // Display the resized image
          const displayImageId = `displayImage-${event.target.id}`;
          const displayImage = document.getElementById(displayImageId);
          displayImage.innerHTML = `<img src="${resizedBase64}" alt="Resized" width="50%" />`;
      });
  });


  async function resizeImage(file,
      maxWidth, maxHeight) {
      const image = await createImageBitmap(file);
      const canvas = document.createElement('canvas');
      const ctx = canvas.getContext('2d');
      const aspectRatio = image.width / image.height;
      let newWidth = maxWidth;
      let newHeight = maxHeight;
      if (aspectRatio > 1 && image.width >= maxWidth) {
          newWidth = maxWidth; newHeight = maxWidth /
              aspectRatio;
      } else if (aspectRatio < 1 && image.height >= maxHeight) {
          newWidth = maxHeight * aspectRatio; newHeight = maxHeight;
      }
      canvas.width = newWidth; canvas.height = newHeight;
      ctx.drawImage(image, 0, 0, newWidth, newHeight);
      {{!-- 
      const resizedBlob = await new Promise(resolve =>
          canvas.toBlob(resolve, 'image/jpeg'));
      return new File([resizedBlob], file.name, { type: 'image/jpeg' });
      --}}
      return canvas.toDataURL('image/jpeg', 0.8);
  }
</script>